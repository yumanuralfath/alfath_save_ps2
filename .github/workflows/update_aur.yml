name: Update AUR pkgver

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  update-aur:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH key for AUR
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_KEY }}

      - name: Add AUR to known hosts
        run: |
          ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -T aur@aur.archlinux.org || echo "SSH connection test completed"

      - name: Setup Arch Linux in Docker
        run: |
          docker pull archlinux:latest

      - name: Update PKGBUILD and generate SRCINFO
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${RELEASE_TAG#v}
          echo "Updating to version: $VERSION"
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i '/^pkgver()/,/^}$/ s/^/# /' PKGBUILD
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            archlinux:latest \
            bash -c "
              pacman -Sy --noconfirm base-devel git
              useradd -m builder
              chown -R builder:builder /workspace
              sudo -u builder makepkg --printsrcinfo > .SRCINFO
            "
          echo "Generated .SRCINFO:"
          cat .SRCINFO

      - name: Restore workspace ownership
        run: |
          sudo chown -R $(id -u):$(id -g) $PWD

      - name: Clone AUR repository
        run: |
          git clone ssh://aur@aur.archlinux.org/alfathsave.git aur-repo

      - name: Update AUR repository
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${RELEASE_TAG#v}

          # Copy updated files to AUR repo
          cp PKGBUILD .SRCINFO aur-repo/

          cd aur-repo

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add files to staging
          git add PKGBUILD .SRCINFO

          # This check is more reliable, especially for the initial commit.
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Committing and pushing..."
            git commit -m "Update to version $VERSION"
            
            # The '-u' flag sets the upstream branch, which is necessary for the first push.
            git push -u origin master
            
            echo "âœ… Successfully updated AUR package to version $VERSION"
          else
            echo "No changes to commit"
          fi
